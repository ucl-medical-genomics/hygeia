#!/usr/bin/env Rscript

################################################################################
#
# R script for simulating data (including the total number of reads)
# from the single-group model
#
################################################################################

library("argparser")
parser <- arg_parser(description = "")
parser <- add_argument(
  parser, "--mu",
  default = "0.99,0.01,0.80,0.20,0.50,0.50",
  help = "The means of the R beta distributions which govern the R distinct methylation regimes. Values must be between 0 and 1. [default: %default]"
)
parser <- add_argument(
  parser, "--sigma",
  default = "0.05,0.05,0.20,0.20,0.20,0.2886751",
  help = "The standard deviations of the R beta distributions which govern the R distinct methylation regimes. Note that for each regime, the values of mu and sigma must satisfy sigma^2 < mu * (1 - mu) [default: %default]"
)
parser <- add_argument(
  parser, "--u",
  default = 2,
  help = "The minimum distance (measured as number of CpG sites) between change points [default: %default]",
  type="integer"
)
parser <- add_argument(
  parser, "--kappa",
  default = "2,2,2,2,2,2",
  help = "Number-of-sucesses parameters of the regime-specific negative-binomial distributions governing the function h() which determines the change-point probabilities [default: %default]"
)
parser <- add_argument(
  parser, "--omega",
  default = "0.995,0.975,0.950,0.925,0.900,0.900",
  help = "Success-probability parameters of the regime-specific negative-binomial distributions governing the function h() which determines the change-point probabilities [default: %default]"
)


parser <- add_argument(
  parser,
  "--mu_csv_file",
  help = "CSV file containing parameter vector mu (see documentation)"
)
parser <- add_argument(
  parser,
  "--sigma_csv_file",
  help = "CSV file containing parameter vector sigma (see documentation)"
)
parser <- add_argument(
  parser,
  "--omega_csv_file",
  help = "CSV file containing parameter vector omega (see documentation)"
)
parser <- add_argument(
  parser,
  "--kappa_csv_file",
  help = "CSV file containing parameter vector kappa (see documentation)"
)
parser <- add_argument(
  parser,
  "--u_csv_file",
  help = "CSV file containing parameter vector u (see documentation)"
)
parser <- add_argument(
  parser,
  "--p_csv_file",
  help = "CSV file containing parameter vector p (see documentation)"
)

parser <- add_argument(
  parser,
  "--regimes_csv_file",
  help = "path to the regimes CSV file"
)
parser <- add_argument(
  parser,
  "--n_methylated_reads_csv_file",
  help = "path to the n_methylated_reads CSV file"
)
parser <- add_argument(
  parser,
  "--genomic_positions_csv_file",
  help = "path to the genomic_positions CSV file"
)
parser <- add_argument(
  parser,
  "--n_total_reads_csv_file",
  help = "path to the n_total_reads CSV file"
)

parser <- add_argument(
  parser,
  "--number_of_samples",
  type = "integer",
  help = "the number of (biological) samples"
)
parser <- add_argument(
  parser,
  "--number_of_cpg_sites",
  type = "integer",
  help = "number of CpG sites"
)

parser <- add_argument(
  parser,
  "--lambda",
  type = "double",
  help = "expected number of reads per CpG site and sample",
  default = 100
)
parser <- add_argument(
  parser,
  "--root_dir",
  default = './src/r',
  help = "root directory for the src folder containing the R scripts"
)
parser <- add_argument(
  parser,
  "--randomise_rng_seed",
  type = "boolean",
  help = "should the seed for the random number generator be randomised?",
  default = TRUE
)
parser <- add_argument(
  parser,
  "--rng_seed",
  type = "integer",
  help = "seed for the random number generator (only used if randomise_rng_seed is FALSE)",
  default = -73
)

cmd_args <- parse_args(parser)

if (!cmd_args$randomise_rng_seed) {
  set.seed(cmd_args$rng_seed)
}

# Load auxiliary functions
source(file = file.path(cmd_args$root_dir, "build.R"), chdir = TRUE)
source(file = file.path(cmd_args$root_dir, "input_output_functions.R"), chdir = TRUE)
source(file = file.path(cmd_args$root_dir, "model_functions.R"), chdir = TRUE)

# LOAD MODEL PARAMETERS FROM ARGs
# ============================================================================ #
u <- cmd_args$u
kappa <- as.numeric(unlist(strsplit(cmd_args$kappa, ",")))
omega <- as.numeric(unlist(strsplit(cmd_args$omega, ",")))
sigma <- as.numeric(unlist(strsplit(cmd_args$sigma, ",")))
mu <- as.numeric(unlist(strsplit(cmd_args$mu, ",")))

# transition matrix for the regimes:
p <- matrix(
  c(rep(c(0, rep(1 / 5, times = length(mu))), times = length(mu) - 1), 0),
  nrow = length(mu),
  ncol = length(mu)
)


# Ensure the output directories exist
file_paths <- c(
  cmd_args$regimes_csv_file,
  cmd_args$n_methylated_reads_csv_file,
  cmd_args$genomic_positions_csv_file,
  cmd_args$n_total_reads_csv_file
)
lapply(file_paths, create_dirs_for_file)

# SIMULATE DATA
# ============================================================================ #

# Simulates the data and writes the output to CSV files.
out <- simulate_data(
  regimes_csv_file = cmd_args$regimes_csv_file,
  n_methylated_reads_csv_file = cmd_args$n_methylated_reads_csv_file,
  genomic_positions_csv_file = cmd_args$genomic_positions_csv_file,
  n_total_reads_csv_file = cmd_args$n_total_reads_csv_file,
  mu = mu,
  sigma = sigma,
  p = p,
  omega = omega,
  kappa = kappa,
  u = u,
  n_samples = cmd_args$number_of_samples, # the number of (biological) samples
  n_cpg_sites = cmd_args$number_of_cpg_sites, # number of observations/time steps/CpG sites
  lambda = cmd_args$lambda, # expected number of reads per CpG site and sample
  randomise_rng_seed = cmd_args$randomise_rng_seed, # should the seed for the random number generator be randomised?
  rng_seed = cmd_args$rng_seed # the seed of the random number generator
)
