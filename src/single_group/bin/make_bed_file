#!/usr/bin/env Rscript

################################################################################
#
# R script for creating BED files from the regimes CSV files
#
################################################################################

library(data.table)
library(argparser)

p <- arg_parser("Process a single sample to create a BED track file")
p <- add_argument(p, "--chr", help = "Chromosome number (without 'chr' prefix)")
p <- add_argument(p, "--regimes_file", help = "Path to the regimes file for this sample/chr")
p <- add_argument(p, "--output_file", help = "Path to save the output BED file")

argv <- parse_args(p)

process_single_sample <- function(chr, regimes_file, output_file) {
  regimes <- fread(regimes_file)
  # get the regime columns - all columns except the first
  regime_cols <- setdiff(names(regimes), 'genomic_position')
  
  regimes[, `:=`(
    chr = chr,
    start = genomic_position - 1, # convert to zero-base
    end = genomic_position + 1    # end is original position + 1
  )]
  
  # get the maximum probability (score col) for each row across the regime columns
  regimes[, score := do.call(pmax, .SD), .SDcols = regime_cols]

  # Identify if there are ties (multiple columns with max probability)
  regimes[, tie_count := rowSums(.SD == score), .SDcols = regime_cols]

  regimes[, name := ifelse(
    tie_count > 1, 
    "equiprobable",
    regime_cols[max.col(.SD, ties.method = "first")]
  ), .SDcols = regime_cols]
  
  regimes[, c("genomic_position", "tie_count", regime_cols) := NULL]
  
  # Add additional BED columns
  # TODO - This colors still assumes 6 regimes - fix to make it work with a different number of regimes. 
  # automatically select colours - https://stackoverflow.com/questions/15282580/how-to-generate-a-number-of-most-distinctive-colors-in-r
  bed_colors <- data.table(
    regime = c(regime_cols, "equiprobable"),
    itemRgb = c("248,118,109", "183,159,0", "0,186,56", "0,191,196", "97,156,255", "245,100,227", "128,128,128")
  )
  
  regimes[, `:=`(
    strand = ".",
    thickStart = start,
    thickEnd = end
  )]

  # Merge with colors
  bed <- merge(regimes, bed_colors, by.x = "name", by.y = "regime", all.x = TRUE)
  setcolorder(bed, c("chr", "start", "end", "name", "score", "strand", "thickStart", "thickEnd", "itemRgb"))
  setkey(bed, chr, start)

  # Create output directory if it doesn't exist
  output_dir <- dirname(output_file)
  if (!dir.exists(file.path(output_dir))) {
    dir.create(file.path(output_dir), recursive = TRUE)
  }
  fwrite(bed, output_file, sep = "\t", col.names = FALSE, scipen = 999)
  
  message(paste0("Completed processing for chromosome ", chr))
  return(invisible(NULL))
}

# Execute with command line arguments
process_single_sample(
  chr = argv$chr,
  regimes_file = argv$regimes_file,
  output_file = argv$output_file
)
