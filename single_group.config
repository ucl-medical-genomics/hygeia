params {
  output_dir = 'results'

  simulate_data = true

  // The means of the R beta distributions which govern the R distinct
  // methylation regimes.
  // Values must be between 0 and 1
  meteor_mu = '0.99,0.01,0.80,0.20,0.50,0.50'

  // The standard deviations of the R beta distributions which govern the R
  // distinct methylation regimes. Note that for each regime, the values of mu
  // and sigma must satisfy sigma^2 < mu * (1 - mu)
  meteor_sigma = '0.05,0.05,0.20,0.20,0.20,0.2886751'

  ///////
  // Default Arguments
  ///////

  // The minimum distance (measured as number of CpG sites) between change points.
  // Defined as `u`
  min_cpg_sites_between_change_points = 2

  // Kappa: Number-of-sucesses parameters of the regime-specific negative-binomial
  // distributions governing the function h() which determines the change-point
  // probabilities
  kappa = '2,2,2,2,2,2'

  // Omega: Success-probability parameters of the regime-specific negative-binomial
  // distributions governing the function h() which determines the change-point
  // probabilities
  omega =  '0.995,0.975,0.950,0.925,0.900,0.900'

  simulate_data_extra_args = [
    "--number_of_samples 2",
    "--number_of_cpg_sites 250",
    "--lambda 100",
    "--rng_seed 73"
  ]

  parameters_and_regimes.extra_args = [
    "--estimate_regime_probabilities",
    "--estimate_parameters"
  ]

  // Default file names
  mu_csv_filename = "mu.csv"
  sigma_csv_filename = "sigma.csv"
  omega_csv_filename = "omega.csv"
  kappa_csv_filename = "kappa.csv"
  u_csv_filename = "u.csv"
  p_csv_filename = "p.csv"

  regimes_csv = "regimes.csv"
  n_methylated_reads_csv = "n_methylated_reads.csv"
  genomic_positions_csv = "genomic_positions.csv"
  n_total_reads_csv = "n_total_reads.csv"
  regime_probabilities_csv = "regimes.csv"
  theta_trace_csv = "theta_trace.csv"
}

profiles {
  local {
    process.executor = 'local'
  }
}

process {\
  errorStrategy = 'terminate'
  // errorStrategy = 'ignore'
}

docker {
  enabled = true
}

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
  enabled = true
  file = "results/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
  enabled = true
  file = "results/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
  enabled = true
  file = "results/pipeline_info/pipeline_trace_${trace_timestamp}.txt"
}
